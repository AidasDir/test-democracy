const { mint, pt, cheatPt, doPt } = require('..')
const { getConfig } = require('demo-utils')
const { wallet } = require('demo-keys')
const { Map } = require('immutable')
const chai = require('chai')
const assert = chai.assert
const expect = chai.expect
chai.use(require('chai-as-promised'))
const { parsed } = require('dotenv').config()

describe('Private trade', () => {

  const SELLER_TRADE_SYMBOL = 'AAA'
  const BUYER_TRADE_SYMBOL  = 'BBB'

  it('cheating private trade fails but cooperating one prospers', async () => {
    
    const sellerResult = await mint(Map({
      tradeSymbol     : SELLER_TRADE_SYMBOL,
      minteeAddress   : parsed['TEST_ADDRESS_1'],
      minteePublicKey : parsed['TEST_PUBLIC_KEY_1'],
      minteeAmount    : 22,
      unlockSeconds   : 90,
    }))
    wallet.shutdownSync()
    const sellerNoteHash = sellerResult.get('minteeNoteHash')

    const buyerResult = await mint(Map({
      tradeSymbol     : BUYER_TRADE_SYMBOL,
      minteeAddress   : parsed['TEST_ADDRESS_2'],
      minteePublicKey : parsed['TEST_PUBLIC_KEY_2'],
      minteeAmount    : 22,
      unlockSeconds   : 90,
    }))
    wallet.shutdownSync()
    const buyerNoteHash = buyerResult.get('minteeNoteHash')

    // The cheating private trade will try to run the confidentialTransfers individually,
    // not from the proxy contract
    await expect (
      doPt(sellerNoteHash, buyerNoteHash, cheatPt)
    ).to.be.rejectedWith(Error)
    wallet.shutdownSync()

    // This valid private trade will succeed on the same hashes that failed previously
    //const result2 = await doPt(sellerNoteHash, buyerNoteHash)
    //assert(result2.get('txHash'))

  })

  after(() => {
    wallet.shutdownSync()
  })
  
})
