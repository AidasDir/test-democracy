'use strict'
const { Map, OrderedMap } = require('immutable')
const { toChecksumAddress, keccak } = require('ethereumjs-util')
const BN = require('bn.js')
const chai = require('chai')
const assert = chai.assert
chai.use(require('chai-as-promised'))
const { parsed } = require('dotenv').config()

const { padLeft } = require('web3-utils')
const { Logger } = require('demo-utils')
const { wallet } = require('demo-keys')
const { runTransforms, deployerTransform, createArgListTransform } = require('demo-transform')
const { departTransform } = require('demo-depart')
const { AZTEC_TYPES : TYPES } = require('demo-aztec-lib')

const LOGGER = new Logger('params.spec')

const m0 = createArgListTransform(Map({
  unlockSeconds       : TYPES.integer,
  testValueETH        : TYPES.string,
  testAccountIndex    : TYPES.integer,
  wallet              : TYPES.wallet,
  sourcePathList      : TYPES.array,
}))

const initialState = Map({
  unlockSeconds       : 30,
  testValueETH        : '0.1',
  testAccountIndex    : 1,
  proxyContractName   : 'SwapProxy',
  proxySwapMethodName : 'twoSidedTransfer',
  sourcePathList      : ['../../node_modules/@aztec/protocol/contracts'],
  wallet,
})

describe('Param utils ', () => {

  let pu

  const earlyPipeline = OrderedMap([
    [ 'argList' , m0 ],
    [ 'deployer', deployerTransform],
    [ 'depart'  , departTransform],
  ])

  before(async () => {
    const result = (await runTransforms( earlyPipeline, initialState )).toJS()
    pu = await result.deployed( 'ParamUtils' )
  })

  it('calls getAddress', async () => {

    const address = await pu.getAddress( parsed['TEST_ADDRESS_1'], 0 )
    assert.equal( toChecksumAddress(address['0']),
      parsed['TEST_ADDRESS_1'],
      `Unpacked address does not match.`
    )
  })

  it('calls getAddress within SwapProxy', async () => {

    const address = await pu.getAddress( parsed['TEST_ADDRESS_1'] + '1234', 0 )
    LOGGER.info('address', address)
    const bytes32 = keccak(parsed['TEST_PUBLIC_KEY_1']).toString('hex')
    assert.equal( toChecksumAddress(address['0']),
      parsed['TEST_ADDRESS_1'],
      `Unpacked address does not match.`
    )

  })
  
  it('calls getUint256 within SwapProxy', async () => {

    const params = padLeft(parsed['TEST_ADDRESS_3'], 64)
    LOGGER.info('params', params)
    // This is a usability prob, but uint256's get an offset at the ending bit index
    // not the beginning. offset 32 means beginning at 0.
    const uint = await pu.getUint256(params, 32)
    LOGGER.info('uint', uint)
    assert( uint['0'].eq(new BN(parsed['TEST_ADDRESS_3'].slice(2), 16)),
      `Unpacked address does not match.`
    )

  })

  it('slices bytes', async () => {
    const bytesArray1 = '0x000000000000000000000000000000000000000000000000000000000000046200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000001051cd3f5d5f3e097713265732a10677c043ccea0000000000000000000000000000000000000000000000000000000000000000275e0dcdb30c7517880442ca93307280de58c5fdcc8df052a7f6d2f6076d4dbc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000047c2717648b6c16434b3f8840e94604918b9cb409beeee762018a3f44689b141d43aafc003a70d7dca058922e608f22be58e0d4e0000000000000000000000000000000000000000000000000000000000000040836d7bfaa325cff3dec96b890b6d735b4817727354955f335c37ef5ac92f54b722f0bc1ab967d74f22e2618a892ac6748b9ff93b0eaf372f33dcd17bce5dfa85000000000000000000000000000000000000000000000000000000000000026200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000018100000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062f8729c5f05b78a730306a77a9b343d6808363edbb075374e4737e5b1edb4558a307118bde126c90c0bfd8a0189419eb0c0669d00000000000000000000000000000000000000000000000000000000000000611be58ce4094d4ccb3110a162828feb02e61122fe6fb8333fe148791a3e65bc311591df5dd973521ee2c9f9fba4f88aca5851d1d1ec19ac2e1a90296e1d1b322124f242e7d437a6ae213479e81536875f8eb9b1a5233953847b59743046aa2b610000000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000047c2717648b6c16434b3f8840e94604918b9cb4081a6b42cffdb01c48ac1c81ddec9e9d470168144f30a368d08faf8842e1bfe2c0000000000000000000000000000000000000000000000000000000000000061b03ca04ac252a5add0b1a58017a2d37b4964ad700ec9c4e9a8684f1d279ec2fa8af8fadaba007615959e7aee64e69ed6d2d2e4dd8cee7a046a8057bbcfd5edb48c16b7210ea51864b59fc3ecd94ccb28c402db9ed7b7359febcaf8eee23ba9ee00'

    const bytesArray2 = '0x00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000001051cd3f5d5f3e097713265732a10677c043ccea0000000000000000000000000000000000000000000000000000000000000000275e0dcdb30c7517880442ca93307280de58c5fdcc8df052a7f6d2f6076d4dbc00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000047c2717648b6c16434b3f8840e94604918b9cb409beeee762018a3f44689b141d43aafc003a70d7dca058922e608f22be58e0d4e0000000000000000000000000000000000000000000000000000000000000040836d7bfaa325cff3dec96b890b6d735b4817727354955f335c37ef5ac92f54b722f0bc1ab967d74f22e2618a892ac6748b9ff93b0eaf372f33dcd17bce5dfa85000000000000000000000000000000000000000000000000000000000000026200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000018100000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062f8729c5f05b78a730306a77a9b343d6808363edbb075374e4737e5b1edb4558a307118bde126c90c0bfd8a0189419eb0c0669d00000000000000000000000000000000000000000000000000000000000000611be58ce4094d4ccb3110a162828feb02e61122fe6fb8333fe148791a3e65bc311591df5dd973521ee2c9f9fba4f88aca5851d1d1ec19ac2e1a90296e1d1b322124f242e7d437a6ae213479e81536875f8eb9b1a5233953847b59743046aa2b610000000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000047c2717648b6c16434b3f8840e94604918b9cb4081a6b42cffdb01c48ac1c81ddec9e9d470168144f30a368d08faf8842e1bfe2c0000000000000000000000000000000000000000000000000000000000000061b03ca04ac252a5add0b1a58017a2d37b4964ad700ec9c4e9a8684f1d279ec2fa8af8fadaba007615959e7aee64e69ed6d2d2e4dd8cee7a046a8057bbcfd5edb48c16b7210ea51864b59fc3ecd94ccb28c402db9ed7b7359febcaf8eee23ba9ee00'

    const slicedBytes = await pu.sliceBytes(
      bytesArray1, 32, bytesArray1.slice(2).length/2
    )
    assert.equal( slicedBytes['0'], bytesArray2, `sliced bytes did not match` )
  })
  
  after(() => {
    wallet.shutdownSync()
  })
  
})
