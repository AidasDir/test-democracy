const webpack = require('webpack')
const HtmlWebPackPlugin = require('html-webpack-plugin')

const path = require('path');
const npm_package = require('./package.json')

const { Logger } = require('@democracy.js/utils')
const logger = new Logger('webpack.config.js', ['info','debug','error'])

module.exports = env => {
  logger.info(`NODE_ENV=${process.env.NODE_ENV}`)
  return {
    module: {
      noParse: /browserfs\.js/,
      rules: [
        {
          test: /\.(js|jsx)$/,
          use: {
            loader: "babel-loader",
            options: {
              presets: ["@babel/preset-env"]
            }
          }
        },
        {
          test: /\.html$/,
          use: [
            {
              loader: "html-loader"
            }
          ]
        }
      ]
    },
    entry: {
      'bundle.js': [
        './src/index.js',
        path.resolve(__dirname, 'node_modules/browserfs/dist/browserfs.min.js')
      ]
    },
    output: {
      filename: 'bundle.js',
      path: path.resolve(__dirname, 'dist')
    },
    target: 'web',
    node: {
      process: false,
      Buffer: false,
    },
    mode: 'development',
    /*
    externals: {
      'config': require('config'),
      'path': require('path')
    },
   */
    resolve: {
      alias: {
        'fs': 'browserfs/dist/shims/fs.js',
        'buffer': 'browserfs/dist/shims/buffer.js',
        'path': 'browserfs/dist/shims/path.js',
        'processGlobal': 'browserfs/dist/shims/process.js',
        'bufferGlobal': 'browserfs/dist/shims/bufferGlobal.js',
        'bfsGlobal': require.resolve('browserfs'),
        './testWallets.json': require.resolve('./interim/protocol/demo/testWallets.json'),
        ...npm_package._moduleAliases
      }
    },
    devServer: {
      compress: true,
      disableHostCheck: true,   // That solved it
    },     
    plugins: [ 
      new HtmlWebPackPlugin({
        template: "./src/index.html",
        filename: "./index.html"
      }),
      new webpack.ProvidePlugin({
        BrowserFS: 'bfsGlobal',
        process: 'processGlobal',
        Buffer: 'bufferGlobal'
      }),
      new webpack.EnvironmentPlugin( { ...process.env } ),
      /*
      new webpack.ContextReplacementPlugin(
        /\.\*\/,
          (context) => { console.log(JSON.stringify(context)) }
      )*/
    ]
  }
}
