#!/usr/bin/env node
'use strict'

// Democracy Depart command-line tool: orchestrated deploys to the chain

const { Map }   = require('immutable')
const fs = require('fs')
const path = require('path')
const { wallet } = require('demo-keys')
const { getConfig, Logger } = require('demo-utils')
const { runTransforms, deployerTransform, DEMO_TYPES: TYPES } = require('demo-transform')
const { departTransform, argListTransform } = require('demo-depart')
const { createTransform } = require('demo-state')
const LOGGER = new Logger('demo-depart')

let departOptions
let departCallback
const depart = (options, callback) => {
  departOptions = options
  departCallback = callback
}

const m0 = argListTransform

const initialState = Map({
  'departFileName'   : 'depart.js', // --departFileName
  'testValueETH'     : '0.1'      ,
  'testAccountIndex' : 0          ,
  'unlockSeconds'    : 30,
  'sourcePathList'   : [],
})

// Insert this custom mixin to read in a departure file and save its name
// and callback
const m1 = createTransform({
  func: async ({ departFileName }) => {
    LOGGER.info(`Depart filename ${departFileName}`)
    const departFile = fs.readFileSync(path.join(process.cwd(), departFileName)).toString()
    eval(departFile)

    return Map({
      departFile : departFile,
      ...departOptions,
    })
  },
  inputTypes: Map({
    departFileName: TYPES.string,
  }),
  outputTypes: Map({
    departFile: TYPES.string,
  }),
})

const m2 = deployerTransform

const m3 = departTransform

const departFunc = createTransform({
  func: async function({
    bm, compile, link, deploy, deployed, minedTx, deployerEth, deployerAddress, departFile
  }) {
    const result = await departCallback({...arguments[0]})
    wallet.shutdownSync()
    return new Map({ 'result': result })
  },
  inputTypes: Map({
    compile: TYPES['function'],
    link: TYPES['function'],
    deploy: TYPES['function'],
    deployed: TYPES['function'],
    minedTx: TYPES['function'],
    deployerEth: TYPES.ethereumSigner,
    deployerAddress: TYPES.ethereumAddress,
    departFile: TYPES.string,
  }),
  outputTypes: Map({
    result: TYPES.any,
  })
})

runTransforms( [ m0, m1, m2, m3, departFunc ], initialState )
